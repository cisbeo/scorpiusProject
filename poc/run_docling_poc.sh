#!/bin/bash

# Script pour lancer le POC Docling avec Docker
# Usage: ./run_docling_poc.sh [build|start|stop|test|logs]

set -e

# Couleurs pour output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
DOCKER_DIR="docker/docling-poc"
POC_DIR="poc"
API_URL="http://localhost:8001"

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Fonction pour construire l'image Docker
build_docker() {
    log_info "Construction de l'image Docker Docling..."

    cd $DOCKER_DIR

    # Cr√©er les dossiers n√©cessaires
    mkdir -p output logs

    # Construire l'image
    docker-compose build

    log_success "Image Docker construite avec succ√®s !"
}

# Fonction pour d√©marrer les services
start_services() {
    log_info "D√©marrage des services Docling..."

    cd $DOCKER_DIR

    # D√©marrer les conteneurs
    docker-compose up -d

    # Attendre que l'API soit pr√™te
    log_info "Attente du d√©marrage de l'API..."
    sleep 5

    # V√©rifier la sant√©
    if curl -f ${API_URL}/health > /dev/null 2>&1; then
        log_success "API Docling d√©marr√©e avec succ√®s !"
        log_info "üåê Interface de d√©mo: ${API_URL}/demo"
        log_info "üìö Documentation API: ${API_URL}/docs"
    else
        log_error "L'API n'a pas d√©marr√© correctement"
        docker-compose logs docling-poc
        exit 1
    fi
}

# Fonction pour arr√™ter les services
stop_services() {
    log_info "Arr√™t des services Docling..."

    cd $DOCKER_DIR
    docker-compose down

    log_success "Services arr√™t√©s"
}

# Fonction pour afficher les logs
show_logs() {
    cd $DOCKER_DIR
    docker-compose logs -f docling-poc
}

# Fonction pour tester l'extraction
test_extraction() {
    log_info "Test d'extraction sur CCTP probl√©matique..."

    # Test de l'endpoint health
    log_info "V√©rification de la sant√© du service..."
    curl -s ${API_URL}/health | python -m json.tool

    # Test avec CCTP probl√©matique
    log_info "Test avec CCTP simul√©..."
    response=$(curl -s ${API_URL}/test/cctp)

    if [ $? -eq 0 ]; then
        echo "$response" | python -m json.tool

        # Analyser les r√©sultats
        has_docling_problems=$(echo "$response" | python -c "import sys, json; data = json.load(sys.stdin); print(data['docling']['has_problems'])")
        has_traditional_problems=$(echo "$response" | python -c "import sys, json; data = json.load(sys.stdin); print(data['traditional']['has_problems'])")

        echo ""
        log_info "=== R√âSUM√â DU TEST ==="

        if [ "$has_docling_problems" == "False" ] && [ "$has_traditional_problems" == "True" ]; then
            log_success "‚úÖ Docling r√©sout les probl√®mes d'espacement !"
        else
            log_warning "‚ö†Ô∏è Docling n'a pas r√©solu tous les probl√®mes"
        fi

        # Afficher les am√©liorations
        improvements=$(echo "$response" | python -c "
import sys, json
data = json.load(sys.stdin)
for key, value in data.get('improvements', {}).items():
    print(f'  ‚Ä¢ {key}: {value}')
")

        if [ ! -z "$improvements" ]; then
            log_info "Am√©liorations Docling:"
            echo "$improvements"
        fi

    else
        log_error "√âchec du test"
    fi
}

# Fonction pour cr√©er un fichier PDF de test
create_test_pdf() {
    log_info "Cr√©ation d'un PDF de test avec probl√®mes Word 2013..."

    # Script Python pour cr√©er le PDF
    python3 << 'EOF'
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter

pdf_path = "test_cctp_problematic.pdf"
c = canvas.Canvas(pdf_path, pagesize=letter)

# Titre avec espaces probl√©matiques (simule Word 2013)
c.setFont("Helvetica-Bold", 16)
c.drawString(100, 750, "ACCOMPAGNEMENT AU PR OGRAMME")
c.drawString(100, 730, "DE TRANSFORMATION DI GITALE HEC PARIS")

c.setFont("Helvetica-Bold", 14)
c.drawString(100, 690, "CAHIER DES CLAUSES TECHNIQUES (CCTP)")

c.setFont("Helvetica", 12)
c.drawString(100, 650, "1. Objet du march√©")
c.drawString(100, 620, "La pr√©sente consultation porte sur la fourniture de prestations de")
c.drawString(100, 600, "management de pr ogramme, et gestion de projets Agiles,")
c.drawString(100, 580, "accompagnement √† la d√©marche d'in novation par la m√©thode")
c.drawString(100, 560, "Design Thinking.")

c.drawString(100, 520, "La partie A comprend les prestations suivantes :")
c.drawString(120, 500, "- Program Management Office (~1 ETP sur 6 mois)")
c.drawString(120, 480, "- Organisation et an imation d'ateliers Design Thinking")
c.drawString(120, 460, "- Conseil en architecture d'en treprise")

c.showPage()
c.save()

print(f"‚úÖ PDF de test cr√©√©: {pdf_path}")
EOF

    log_success "PDF de test cr√©√©: test_cctp_problematic.pdf"
}

# Menu principal
case "${1:-help}" in
    build)
        build_docker
        ;;

    start)
        build_docker
        start_services
        ;;

    stop)
        stop_services
        ;;

    restart)
        stop_services
        start_services
        ;;

    test)
        test_extraction
        ;;

    logs)
        show_logs
        ;;

    create-test-pdf)
        create_test_pdf
        ;;

    demo)
        log_info "Ouverture de l'interface de d√©mo..."
        open ${API_URL}/demo || xdg-open ${API_URL}/demo
        ;;

    *)
        echo "Usage: $0 {build|start|stop|restart|test|logs|create-test-pdf|demo}"
        echo ""
        echo "Commands:"
        echo "  build           - Construire l'image Docker"
        echo "  start           - D√©marrer les services (build + up)"
        echo "  stop            - Arr√™ter les services"
        echo "  restart         - Red√©marrer les services"
        echo "  test            - Tester l'extraction sur CCTP"
        echo "  logs            - Afficher les logs"
        echo "  create-test-pdf - Cr√©er un PDF de test probl√©matique"
        echo "  demo            - Ouvrir l'interface web de d√©mo"
        echo ""
        echo "Exemple:"
        echo "  $0 start   # D√©marre le POC"
        echo "  $0 test    # Lance les tests"
        echo "  $0 demo    # Ouvre l'interface web"
        exit 1
        ;;
esac